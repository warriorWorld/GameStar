{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","spawnNewStar","gainScore","destroy","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,oBAAW;AAhBH,KAHP;AAqBLC,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAO,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,eAAOJ,IAAP;AACH,KA3BI;;AA6BLK,cAAU,oBAAW;AACjB;AACA,aAAKR,IAAL,CAAUS,YAAV;AACA,aAAKT,IAAL,CAAUU,SAAV;AACA;AACA,aAAKN,IAAL,CAAUO,OAAV;AACH,KAnCI;AAoCL;;AAEA;;AAEAC,SAxCK,mBAwCI,CAER,CA1CI;AA4CJC,UA5CI,kBA4CIC,EA5CJ,EA4CQ;AACT;AACK,YAAI,KAAKhB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC5C;AACA,iBAAKW,QAAL;AACA;AACH;AACR;AAnDG,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        pickRadius:0,\r\n    },\r\n    getPlayerDistance: function () {\r\n        // judge the distance according to the position of the player node\r\n        var playerPos = this.game.player.getPosition();\r\n        // calculate the distance between two nodes according to their positions\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\r\n        this.game.spawnNewStar();\r\n        this.game.gainScore();\r\n        // then destroy the current star's node\r\n        this.node.destroy();\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n     update (dt) {\r\n        // judge if the distance between the star and main character is less than the collecting distance for each frame\r\n             if (this.getPlayerDistance() < this.pickRadius) {\r\n                 // invoke collecting behavior\r\n                 this.onPicked();\r\n                 return;\r\n             }\r\n     },\r\n});\r\n"]}