{"version":3,"sources":["Game.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","score","getComponent","game","gainScore","string","audioEngine","playEffect","newStar","instantiate","starWidth","width","node","addChild","setPosition","getNewStarPosition","Math","random","randX","randY","jumpHeight","maxX","minX","v2","gameOver","stopAllActions","director","loadScene","start","update","dt"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n           // this property quotes the PreFab resource of stars\r\n          starPrefab: {\r\n              default: null,\r\n              type: cc.Prefab\r\n          },\r\n          // the random scale of disappearing time for stars\r\n          maxStarDuration: 0,\r\n          minStarDuration: 0,\r\n          // ground node for confirming the height of the generated star's position\r\n          ground: {\r\n              default: null,\r\n              type: cc.Node\r\n          },\r\n          // player node for obtaining the jump height of the main character and controlling the movement switch of the main character\r\n          player: {\r\n              default: null,\r\n              type: cc.Node\r\n          },\r\n           // reference of score label\r\n                  scoreDisplay: {\r\n                      default: null,\r\n                      type: cc.Label\r\n                  },\r\n // scoring sound effect resource\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n     onLoad () {\r\n      // obtain the anchor point of ground level on the y axis\r\n             this.groundY = this.ground.y + this.ground.height/2; // this.ground.top may also work\r\n              // initialize timer\r\n             this.timer = 0;\r\n             this.starDuration = 0;\r\n             // generate a new star\r\n             this.spawnNewStar();\r\n             this.score=0;\r\n             this.player.getComponent('Player').game=this;\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // update the words of the scoreDisplay Label\r\n        this.scoreDisplay.string = 'Score: ' + this.score;\r\n       // play the scoring sound effect\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // generate a new node in the scene with a preset template\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        this.starWidth=newStar.width;\r\n        // put the newly added node under the Canvas node\r\n        this.node.addChild(newStar);\r\n        // set up a random position for the star\r\n        newStar.setPosition(this.getNewStarPosition());\r\n         // Staging a reference of Game object on a star component\r\n        newStar.getComponent('Star').game = this;\r\n        // reset timer, randomly choose a value according the scale of star duration\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // According to the position of the ground level and the main character's jump height, randomly obtain an anchor point of the star on the y axis\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // according to the width of the screen, randomly obtain an anchor point of star on the x axis\r\n        var maxX = this.node.width/2-this.starWidth/2;\r\n        var minX=this.starWidth/2-this.node.width/2\r\n\r\n        randX = (Math.random() - 0.5) * 2 *  this.node.width/2;\r\n        if(randX<minX){\r\n        randX=minX;\r\n        }else if(randX>maxX){\r\n        randX=maxX;\r\n        }\r\n        // return to the anchor point of the star\r\n        return cc.v2(randX, randY);\r\n    },\r\n    // Game.js\r\n     gameOver: function () {\r\n            this.player.stopAllActions(); //stop the jumping action of the player node\r\n            cc.director.loadScene('game');\r\n     },\r\n    start () {\r\n\r\n    },\r\n\r\n     update (dt) {\r\n // update timer for each frame, when a new star is not generated after exceeding duration\r\n        // invoke the logic of game failure\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n     },\r\n});\r\n"]}